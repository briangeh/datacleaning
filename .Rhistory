q
library(datasets)
data(mtcars)
head(mtcars)
dim(mtcars)
tapply(mtcars$hp, mtcars$cyl, mean)
vec_hp <- tapply(mtcars$hp, mtcars$cyl, mean)
vec_hp[3] - vec_hp[1]
inverse <<- NULL
set <- function(y) {
x <<- y
inverse <<- NULL
}
get <- function() x
set_inverse <- function(calc_inv) inverse <<- calc_inv
get_inverse <- function() inverse
list(set = set, get = get, set_inverse = set_inverse, get_inverse = get_inverse)
makeCacheMatrix <- function(x = matrix()) {
inverse <- NULL
set <- function(y) {
x <<- y
inverse <<- NULL
}
get <- function() x
set_inverse <- function(calc_inv) inverse <<- calc_inv
get_inverse <- function() inverse
list(set = set, get = get, set_inverse = set_inverse, get_inverse = get_inverse)
}
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inverse <- x$get_inverse()
if(!is.null(inverse)) {
message("getting cached data")
return(inverse)
}
data <- x$get()
inverse <- solve(x, ...)
x$set_inverse(inverse)
inverse
}
x <- matrix(1:4, 2, 2)
y <- solve(x)
y
makeCacheMatrix(x)
z <- makeCacheMatrix(x)
z
z <- makeCacheMatrix$set(x)
z <- makeCacheMatrix$set
y$get()
y
z
z$get()
z$set(x+1)
z$get()
z$set(x)
z$set_inverse(cacheSolve(z$get()))
z$set_inverse(cacheSolve(z))
inverse <- solve(data, ...)
x$set_inverse(inverse)
inverse
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inverse <- x$get_inverse()
if(!is.null(inverse)) {
message("getting cached data")
return(inverse)
}
data <- x$get()
inverse <- solve(data, ...)
x$set_inverse(inverse)
inverse
}
z
z$set_inverse(cacheSolve(z))
z$get_inverse()
cacheSolve(z)
a <- makeCacheMatrix(matrix(2:5, 2, 2))
a$get()
a$get_inverse()
cacheSolve(a)
a$get_inverse()
set.seed(1)
rpois(1, 5)
rpois(5, 2)
set.seed(1)
rpois(5, 2)
?rep
library(swirl)
swirl()
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm(mydf)
rm("mydf")
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arc)
select(cran, country:r_arch)
cran
select(cran, -time)
-(5:20)
-5:20
-(5:20)
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, country == "IN", r_version <= "3.0.2")
filter(cran, country == "US" | country == "IN")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3, 5, NA, 10))
is.na(c(3, 5, NA, 10))
!is.na(c(3, 5, NA, 10))
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), desc(ip_id))
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size - 1000)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size))
library(dplyr)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by
group_by(cran, package)
by_package <- group_by(cran, package)
by_package
summarize(by_package, mean(size))
?n
?n_distinct
submit()
pack_sum
quantile(pack_sum$count, probs = 0.99)
top_counts <- filter(pack_sum, count > 679)
top_counts
View(top_counts)
arrange(top_counts, desc(count)
arrange(top_counts, desc(count))
top_counts_sorted <- arrange(top_counts, desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99)
filter(pack_sum, unique > 465)
top_unique <- filter(pack_sum, unique > 465)
View(top_unique)
top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
cran %>%
select(ip_id, country, package_size) %>%
print
cran %>%
select(ip_id, country, package, size) %>%
print
submit()
reset()
swirl()
cran %>%
select(ip_id, country, package, size) %>%
print
submit()
# Use mutate() to add a column called size_mb that contains
submit()
cran %>%
select(ip_id, country, package, size) %>%
mutate(size_mb = size / 2 ^ 20) %>%
print
submit()
cran %>%
select(ip_id, country, package, size) %>%
mutate(size_mb = size / 2^20) %>%
# Your call to filter() goes here
filter(size_mb <= 0.5) %>%
print
submit()
cran %>%
select(ip_id, country, package, size) %>%
mutate(size_mb = size / 2^20) %>%
filter(size_mb <= 0.5) %>%
# Your call to arrange() goes here
arrange(desc(size_mb)) %>%
print
submit()
students
exit()
quit()
q
swirl()
library(tidyr)
students
?gather
gather(students, sex, count, -grade)
students2
gather(students2, sex_class, count, -grade)
res <- gather(students2, sex_class, count, -grade)
res
?separate()
?separate
separate(res, sex_class, into = c("sex", "class"))
submit()
submit()
students3
submit()
submit()
?spread
submit()
library(readr)
parse_number("class5")
?mutate
submit()
submit()
submit()
students4
submit()
submit()
submit()
passed
failed
passed <- mutate(passed, status = "passed")
failed <- mutate(failed, status = "failed")
bind_rows(passed, failed)
sat
submit()
submit()
households <- read.csv("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv")
str(households)
house <- tbl_df(households)
house <- tbl_df(household)
library(dplyr)
house <- tbl_df(household)
house <- tbl_df(households)
house
agricultureLogical <- households$ACR == 3 & households$AGS == 6
which(agricultureLogical)
library(jpeg)
install.packages(jpeg)
install.packages("jpeg")
library(jpeg)
?jpeg
jpeg("https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg")
getwd()
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg", "jeff.jpg")
jpeg("jeff.jpg")
jeff <- jpeg("jeff.jpg")
jeff
?readJPEG
readJPEG("https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg", native = TRUE)
readJPEG("jeff.jpg", native = TRUE)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg", "jeff.jpg")
readJPEG("jeff.jpg", native = TRUE)
jpg <- readJPEG("jeff.jpg", native = TRUE)
jpg
quantile(jpg, c(0.3, 0.8))
quantile(jpg, c(0.2, 0.7))
gdp <- read.csv("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv")
edu <- read.csv("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv")
gdp <- tbl_df(gdp)
edu <- tbl_df(edu)
gdp
edu
View(gdp)
View(edu)
filter(gdp, X != "")
View(gdp)
gdp2 <- filter(gdp, X != "")
View(gdp2)
gdpedu <- merge(gdp2, edu, by.x = "X", by.y = "CountryCode")
gdpedu
View(gdpedu)
dim(gdpedu)
gdp3 <- gdp2[1:190, ]
gdp3
View(gdp3)
gdpedu2 <- merge(gdp3, edu, by.x = "X", by.y = "CountryCode")
dim(gdpedu2)
arrange(gdp3, desc(Gross.domestic.product.2012))
arrange(gdp3, desc(Gross.domestic.product.2012))[13, ]
View(arrange(gdp3, desc(Gross.domestic.product.2012)))
gdp4 <- mutate(gdp3, Gross.domestic.product.2012 = as.numeric(Gross.domestic.product.2012))
gdp4
View(arrange(gdp4, desc(Gross.domestic.product.2012)))
arrange(gdp4, desc(Gross.domestic.product.2012))[13, ]
View(gdp4)
rename(gdp3, rank = Gross.domestic.product.2012)
gdp3
gdp5 <- rename(gdp3, rank = Gross.domestic.product.2012)
gdp5
gdp6 <- mutate(gdp5, rank = as.integer(rank))
gdp6
?read.csv
gdp6 <- mutate(gdp5, rank = as.integer(as.character(rank)))
gdp6
View(gdp6)
arrange(gdp6, desc(rank))
arrange(gdp6, desc(rank))[13, ]
gdpedu2
View(gdpedu2)
gdpedu3 <- select(gdpedu2, -X.1, -(X.4:X.8))
View(gdpedu3)
gdpedu3 <- rename(gdpedu3, rank = as.integer(as.character(Gross.domestic.product.2012)))
gdpedu3 <- rename(gdpedu3, rank = Gross.domestic.product.2012)
gdpedu3 <- mutate(gdpedu3, rank = as.integer(as.character(rank)))
gdpedu4 <- group_by(gdpedu3, Income.Group)
gdpedu4
summarise(gdpedu4, mean(rank))
gdpedu3 <- mutate(gdpedu4, quantile = ntile(rank, 5))
gdpedu5 <- mutate(gdpedu4, quantile = ntile(rank, 5))
gdpedu5
gdpedu5 <- mutate(gdpedu4, quantile = ntile(rank, 5))
View(gdpedu5)
gdpedu2
rm(gdpedu3)
rm(gdpedu4)
rm(gdpedu5)
gdpedu3 <- select(gdpedu2, -X.1, -(X.4:X.8)) %>% rename(rank = Gross.domestic.product.2012) %>% mutate(rank = as.numeric(as.character(rank)))
View(gdpedu3)
gdpedu3
str(gdpedu3)
gdpedu4 <- arrange(gdpedu3, rank)
View(gdpedu4)
gdpedu4 <- mutate(gdpedu4, quantile = ntile(rank))
gdpedu4 <- mutate(gdpedu4, quantile = ntile(rank, 5))
ddply(gdpedu4, .(Income.Group), summarise, count = n(quantile))
library(dplyr)
sum_tbl <- gdpedu4 %>% group_by(Income.Group, quantile) %>% summarise(nrow = n())
sum_tbl
View(sum_tbl)
rm(jeff)
rm(jpg)
quantile(readJPEG("https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg", native = TRUE), c(0.3, 0.8))
quantile(readJPEG("jeff.jpg", native = TRUE), c(0.3, 0.8))
swirl()
install.packages("lubridate")
library(lubridate)
library(swirl)
swirl()
Sys.getlocale("LC_TIME")
library(lubridate)
help(package = lubridate)
today()
this_day <- today()
this_day
year(this_day)
wday(this_day)
wday(this_day, label = TRUE)
now()
this_moment <- now()
this_moment
minute(this_moment)
my_date <- ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
mdy("March 12, 1975")
dmy(25081985)
ymd("192012")
ymd("1920/1/2")
dt1
ymd_hms(dt1)
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
this_moment <- update(this_moment, hours = 12, minutes = 22)
this_moment
?now
now(tzone = "America/New_York")
nyc <- now(tzone = "America/New_York")
nyc
depart <- nyc + days(2)
depart
depart <- update(depart, hours = 17, minutes = 34)
depart
arrive <- depart + hours(15) + minutes(50)
?with_tz()
?with_tz
arrive
arrive <- with_tz(arrive, tzone = "Asia/Hong_Kong")
arrive
last_time <- mdy("June 17, 2008", tz = "Singapore")
last_time
interval(arrive, last_time)
?interval
how_long <- interval(last_time, arrive)
how_long
as.period(how_long)
stopwatch()
community <- read.csv("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv")
?strsplit
str(community)
community <- read.csv("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv", stringsAsFactors = FALSE)
names(community)
strsplit(names(community), "wgtp")
gdp <- read.csv("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv", stringsAsFactors = FALSE)
str(gdp)
head(gdp)
gdp <- gdp(5:,5)
gdp <- gdp(-(1:4):,5)
gdp <- gdp(-(1:4),5)
gdp <- gdp[5:,5]
gdp <- gdp[5:,]
gdp <- gdp[-(1:4),5]
gdp
gdp <- gsub(",", "", gdp)
gdp
gdp <- gsub(".", "", gdp)
gdp
gdp <- read.csv("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv", stringsAsFactors = FALSE)
gdp <- gdp(-(1:4),5)
gdp <- gdp[-(1:4),5]
gdp
gdp <- strtrim(gdp)
library(stringr)
gdp <- str_trim(gdp)
gdp
gdp <- gsub("\.", "", gdp)
gdp <- gsub("\\.", "", gdp)
gdp
gdp <- gsub(",", "", gdp)
gdp
mean(gdp)
mean(as.numeric(gdp))
as.numeric(gdp)
mean(as.numeric(gdp), na.rm = TRUE)
gdp <- gdp[1:190]
mean(as.numeric(gdp), na.rm = TRUE)
gdp <- read.csv("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv", stringsAsFactors = FALSE)
gdp
grep("^United", gdp$X.2)
gdp
edu <- read.csv("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv")
edu <- read.csv("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv", stringsAsFactors = FALSE)
View(edu)
View(gdp)
names(gdp)[1] <- "CountryCode"
gdp
library(dplyr)
?rename
gdp2 <- select(gdp, X:Gross.domestic.product.2012, X.2:X.4)
gdp2 <- tbl_df(gdp)
gdp2 <- select(gdp2, X:Gross.domestic.product.2012, X.2:X.4)
gdp
gdp2
View(gdp)
rm(gdp2)
names(gdp)
names(gdp)[2] <- "Ranking"
names(gdp)[4] <- "Economy"
names(gdp)[5] <- "Size"
names(gdp)[5] <- "Notes"
select(gdp, CountryCode:Ranking, Economy:Notes)
gdp
gdp
names(gdp)[6] <- "Notes"
names(gdp)[5] <- "Size"
gdp2 <- tbl_df(gdp)
select(gdp2, CountryCode:Ranking, Economy:Notes)
gdp <- gdp2
gdp <- gdp[-(1:4),]
gdp <- gdp[1:190,]
gdp <- select(gdp, CountryCode:Ranking, Economy:Notes)
gdpedu <- merge(gdp, edu, by.x = "CountryCode", by.y = "CountryCode", all = FALSE)
View(gdpedu)
View(gdpedu)
grep("Fiscal", gdpedu$Special.Notes, value = TRUE)
grep("Fiscal ([.*]): June", gdpedu$Special.Notes, value = TRUE)
grep("Fiscal([.*]): June", gdpedu$Special.Notes, value = TRUE)
grep("Fiscal([.*]):", gdpedu$Special.Notes, value = TRUE)
grep("Fiscal(.*): June", gdpedu$Special.Notes, value = TRUE)
length(grep("Fiscal(.*): June", gdpedu$Special.Notes, value = TRUE))
install.packages(quantmod)
install.packages("quantmod")
library(quantmod)
amzn = getSymbols("AMZN", auto.assign=FALSE)
class(amzn)
sampleTimes = index(amzn)
class(sampleTimes)
library(lubridate)
sampleTimes
str(sampleTimes)
sampleTimes[year(sampleTimes) = 2012]
sampleTimes[year(sampleTimes) == 2012]
length(sampleTimes[year(sampleTimes) == 2012])
sampleTimes[year(sampleTimes) == 2012 & wday(sampleTimes) == 2]
length(sampleTimes[year(sampleTimes) == 2012 & wday(sampleTimes) == 2])
setwd("~/Coursera/Data Science/Getting and Cleaning Data/final-assignment/datacleaning")
source("run_analysis.R")
View(results)
View(features)
View(features)
View(combined)
View(combined)
source("run_analysis.R")
